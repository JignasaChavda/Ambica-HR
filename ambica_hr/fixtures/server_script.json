[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-04 23:21:40.016406",
  "module": "Ambica HR",
  "name": "Set Component Types in Salary Slip",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Salary Slip",
  "script": "# 1. Set Types in Salary Slip\nsal_nm = doc.name\nsal_st_nm = doc.salary_structure\nstart_date = doc.start_date\nend_date = doc.end_date\nemp = doc.employee\n\nsal_doc = frappe.get_doc(\"Salary Slip\",sal_nm)\nsal_earning = sal_doc.get(\"earnings\")\nsal_deduction = sal_doc.get(\"deductions\")\n\n\nstu_doc = frappe.get_doc(\"Salary Structure\",sal_st_nm)\nst_earning = stu_doc.get(\"earnings\")\nst_deduction = stu_doc.get(\"deductions\")\n\n\n# Set type in Earning Table\nfor st_ear in st_earning:\n    st_com = st_ear.salary_component\n    st_type = st_ear.custom_type\n    st_ear_type = st_ear.custom_earning_component_type\n    st_incentive_type = st_ear.custom_incentive_type\n    st_diff_type = st_ear.custom_difference_type\n    \n    for sal_ear in sal_earning:\n        ans_nm = sal_ear.name\n        ans_com = sal_ear.salary_component\n        \n        if st_com==ans_com:\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_type', st_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_earning_component_type', st_ear_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_incentive_type', st_incentive_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_difference_type', st_diff_type)\n\n\n# Set type in Deduction Table\nfor st_ded in st_deduction:\n    st_com = st_ded.salary_component\n    st_type = st_ded.custom_type\n    st_ded_type = st_ded.custom_deduction_component_type\n    st_pf_ded = st_ded.custom_pf_account_contribution\n    st_can_ded = st_ded.custom_canteen_type\n    st_section_code = st_ded.custom_section_code\n    \n    for sal_ded in sal_deduction:\n        ans_nm = sal_ded.name\n        ans_com = sal_ded.salary_component\n        \n        if st_com==ans_com:\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_type', st_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_deduction_component_type', st_ded_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_pf_account_contribution', st_pf_ded)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_canteen_type', st_can_ded)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_canteen_type', st_section_code)\n\n\n\n\n#2. Set LWF in Salary Slip\nexis_lwf = frappe.db.get_value('Salary Detail', filters={'parent': doc.name, \"custom_deduction_component_type\": \"LWF\"}, fieldname=\"salary_component\")\n\nif exis_lwf is None:\n    \n    labour_welfare_funds = frappe.get_list('Labour Welfare Fund', filters=[['posting_date', 'between', [start_date, end_date]],['docstatus', '=', 1]], fields=['name','component','employee_contribution'])\n    for labour in labour_welfare_funds:\n        labour_nm = labour.name\n        labour_com = labour.component\n        emp_contri = labour.employee_contribution\n        \n        emps = frappe.db.get_value('LWF', filters={'parent': labour_nm, \"employee\": doc.employee}, fieldname=\"employee\")\n        if emps is not None:\n           if labour_com is not None:\n                row = doc.append('deductions', {})\n                row.salary_component = labour_com\n                row.amount = emp_contri\n                row.save()\n            \n        \n\n#Set Paid Holiday Payment\nemployee_doc = frappe.get_doc(\"Employee\", doc.employee)\nholiday_list = employee_doc.holiday_list\ndaily_rate = employee_doc.custom_daily_rate\n\n\ndays = []\n# holiday_list = []\ntotal_days = 0\n\n\nif holiday_list:\n    holiday_child = frappe.get_all('Holiday',filters={'parent': holiday_list,'weekly_off': 0,'holiday_date': ('between', [start_date, end_date])},fields=['holiday_date','description'])\n\n    \n    for holiday in holiday_child:\n        holiday_date = holiday.holiday_date\n        holiday_description = holiday.description\n       \n        non_holiday_date = find_non_holiday_adjacent_dates(holiday_date, holiday_list) \n        frappe.msgprint(str(non_holiday_date))\n        \n        max_iterations = 5  # Set the maximum number of iterations\n        before_offsets = [1, 2, 3, 4, 5]  # Set the before_offsets\n        \n        found_non_holiday = False\n        iterations = 0\n        \n        while not found_non_holiday and iterations < max_iterations:\n            for before_offset in before_offsets:\n                adjacent_date = frappe.utils.add_days(holiday_date, -before_offset)\n        \n                # Check if the adjacent date is not a holiday\n                is_holiday = frappe.get_all('Holiday', {\n                    'parent': holiday_list,\n                    'holiday_date': ['==', adjacent_date]\n                })\n        \n                if not is_holiday:\n                    frappe.msgprint(f\"Found non-holiday date: {adjacent_date}\")\n                    found_non_holiday = True\n                    break  # Exit the inner loop if a non-holiday date is found\n        \n            iterations += 1\n        \n        if not found_non_holiday:\n            frappe.msgprint(\"Desired output not achieved after {} iterations.\".format(max_iterations))\n\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n#             if not doc.is_holiday_or_weekly_off(holiday_date, before_date):\n#                 attendance_records = frappe.get_list('Attendance', filters={'employee': doc.employee,'attendance_date': before_date,'docstatus': 1}, fields=['employee', 'attendance_date', 'custom_derived_present_minutes'])\n#                 for record in attendance_records:\n#                     if record.custom_derived_present_minutes >= 1.0000:\n#                         for after_offset in offsets:\n#                             after_date = holiday_date + timedelta(days=after_offset)\n#                             if not doc.is_holiday_or_weekly_off(holidays, after_date):\n#                                 attendance_records = frappe.get_list('Attendance', filters=filters, fields=['employee', 'attendance_date', 'custom_derived_present_minutes'])\n#                                 for record in attendance_records:\n#                                     if record.custom_derived_present_minutes >= 1.0000:\n#                                         total_days += 1\n#         #                                 doc.append('custom_paid_holidays', {\n# \t\t\t\t\t\t\t\t# \t\t\t'date': holiday_date,\n# \t\t\t\t\t\t\t\t# \t\t\t'description': holiday_description,\n# \t\t\t\t\t\t\t\t# \t\t})\n#                                 break\n#                 break\t\n\n# if total_days > 0:\n# \tdoc.append('earnings', {\n# \t\t'salary_component': \"Paid Holiday Payment\",\n# \t\t'amount': total_days * daily_rate\n# \t})\n        \n\n\n  \n\n    # # start_date = frappe.utils.data.getdate(doc.start_date) \n    # # total_days = 0\n\n    # for holiday in holiday_child:\n        \n    # \t if holiday.weekly_off == 0 and start_date <= holiday.holiday_date <= end_date:\n    # \t     \n\t\t\n# \t\toffsets = [1, 2, 3, 4, 5]\n\n# \t\tfor before_offset in offsets:\n# \t\t\tbefore_date = holiday_date - timedelta(days=before_offset)\n\t\t\t\n# \t\t\tif not doc.is_holiday_or_weekly_off(holidays, before_date):\n# \t\t\t\tfilters = {\n# \t\t\t\t\t'employee': doc.employee,\n# \t\t\t\t\t'attendance_date': before_date,\n# \t\t\t\t\t'docstatus': 1\n# \t\t\t\t}\n# \t\t\t\tattendance_records = frappe.get_list('Attendance', filters=filters, fields=['employee', 'attendance_date', 'custom_derived_present_minutes'])\n# \t\t\t\tfor record in attendance_records:\n# \t\t\t\t\tif record.custom_derived_present_minutes >= 1.0000:\n# \t\t\t\t\t\tfor after_offset in offsets:\n# \t\t\t\t\t\t\tafter_date = holiday_date + timedelta(days=after_offset)\n\n# \t\t\t\t\t\t\tif not doc.is_holiday_or_weekly_off(holidays, after_date):\n# \t\t\t\t\t\t\t\tattendance_records = frappe.get_list('Attendance', filters=filters, fields=['employee', 'attendance_date', 'custom_derived_present_minutes'])\n# \t\t\t\t\t\t\t\tfor record in attendance_records:\n# \t\t\t\t\t\t\t\t\tif record.custom_derived_present_minutes >= 1.0000:\n# \t\t\t\t\t\t\t\t\t\ttotal_days += 1\n# \t\t\t\t\t\t\t\t\t\tdoc.append('custom_paid_holidays', {\n# \t\t\t\t\t\t\t\t\t\t\t'date': holiday_date,\n# \t\t\t\t\t\t\t\t\t\t\t'description': holiday_description,\n# \t\t\t\t\t\t\t\t\t\t})\n# \t\t\t\t\t\t\t\tbreak \n# \t\t\t\tbreak\t\n\n# if total_days > 0:\n# \tdoc.append('earnings', {\n# \t\t'salary_component': \"Paid Holiday Component\",\n# \t\t'amount': total_days * daily_rate\n# \t})\n\n\n\n",
  "script_type": "DocType Event"
 }
]