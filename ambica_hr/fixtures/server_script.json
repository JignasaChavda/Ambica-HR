[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-03 18:46:34.265928",
  "module": "Ambica HR",
  "name": "Set LWF in Salary Slip",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Salary Slip",
  "script": "sal_nm = doc.name\nstart_date = doc.start_date\nend_date = doc.end_date\nfrequency = doc.payroll_frequency\nemp = doc.employee\n\nans = frappe.db.get_value(\"Salary Detail\", filters={\"parent\": doc.name}, fieldname=\"salary_component\")\n\nfrappe.msgprint(str(ans))\n\n# ded_child = sal_doc.get(\"deduction\")\n# for child in ded_child:\n#     sal_compo = child.component\n#     frappe.msgprint(str(sal_compo))\n\n\n# labour_welfare_funds = frappe.get_list('Labour Welfare Fund', filters=[['posting_date', 'between', [start_date, end_date]]], fields=['name'])\n# for labour in labour_welfare_funds:\n#     labour_nm = labour.name\n    \n#     labour_emp = frappe.get_doc(\"Labour Welfare Fund\", labour_nm)\n#     child_form = labour_emp.get(\"lwf_deduction\")\n#     for child in child_form:\n#         child_emp = child.employee\n        \n#         if emp == child_emp:\n#             frappe.msgprint(str(labour_nm))\n#             frappe.msgprint(str(emp))\n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-03 18:46:34.299508",
  "module": "Ambica HR",
  "name": "Clear Salary details table in employee master",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Employee",
  "script": "emp = doc.employee\ncur_assignment = doc.name\n\nemployee = frappe.get_doc(\"Employee\", emp)\nemp_assignment = employee.salary_structure_assignment\n\nif cur_assignment == emp_assignment:\n    employee.salary_structure_assignment = \"\"\n    employee.salary_structure = \"\"\n    employee.get(\"earnings\").clear()\n    employee.save()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-03 18:46:34.284615",
  "module": "Ambica HR",
  "name": "Set LWF as deduction in salary slip",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Salary Slip",
  "script": "# import frappe\n# from datetime import datetime\n# import calendar\n# Ensure start_date is a string\n# import_module = frappe.get_doc('Module', 'getdate')\n# # import_module = frappe.get_module('getdate')\n# # from frappe.utils.data import getdate\n\n# # Ensure start_date is a string\n# start_date_str = str(doc.start_date)\n\n# # Extract month\n# try:\n#     year_month = getdate(start_date_str)\n#     month = year_month.month\n# except ValueError:\n#     frappe.throw(\"Invalid date format\")\n\n# Now 'month' variable contains the month extracted from the start_date\n\n# start_date = doc.start_date\n# date_object = datetime.strptime(start_date, '%Y-%m-%d')\n# month = date_object.month\n\n# last_day = calendar.monthrange(2023, month)[1]\n# filters={'posting_date': ['between', [f'2023-{month:02d}-01', f'2023-{month:02d}-{last_day}']]}\n    \nlwf = frappe.get_all(\n            \"Labour Welfare Fund\",\n            # filters=filters,\n            fields='name'\n        )\n\nemployee_list = []\nlwf_ids = [data['name'] for data in lwf]\nfor lwf_data in lwf_ids:\n        lwf_doc = frappe.get_doc(\"Labour Welfare Fund\", lwf_data)\n        child_data = lwf_doc.get(\"lwf_deduction\")\n        for id in child_data:\n                employee_list.append((lwf_data, id.employee, id.component, id.employee_contribution))\n# frappe.throw(f\"data: {employee_list}\")\n      \n# component_value = None  \n# employee_contribution_value = None\n\n# for lwf_id, employee_id, component, employee_contribution in employee_list:\n#     if employee_id == doc.employee:\n#         frappe.append(doc, 'deductions', {\n#             'salary_component': component,\n#             'amount': employee_contribution\n#         })\n\n# doc.save()\nfor lwf_id, employee_id, component, employee_contribution in employee_list:\n    # if employee_id == doc.employee and not any(d.salary_component == component for d in doc.deductions):\n    #     doc.append('deductions', {\n    #         'salary_component': component,\n    #         'amount': employee_contribution\n    #     })\n     if employee_id == doc.employee:\n        deduction_exists = False\n        for row in doc.deductions:\n            if row.salary_component == component:\n                deduction_exists = True\n                break\n\n        if not deduction_exists:\n            doc.append('deductions', {\n                'salary_component': component,\n                'amount': employee_contribution\n            })\n\n# Check if the deduction is not already in the child table and then append\n# for data in employee_list:\n#     if doc.employee == data.get('employee') and not any(d.get('salary_component') == data.get('salary_component') for d in doc.deductions):\n#         doc.append('deductions', data)\n\n# Save the document outside the loop to avoid recursion\n# doc.save()\n\n# doc.save()\n\n",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-03 18:46:34.240896",
  "module": "Ambica HR",
  "name": "Set types in salary slip",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Salary Slip",
  "script": "# 1. Set Types in Salary Slip\nsal_nm = doc.name\nsal_st_nm = doc.salary_structure\nstart_date = doc.start_date\nend_date = doc.end_date\nemp = doc.employee\n\nsal_doc = frappe.get_doc(\"Salary Slip\",sal_nm)\nsal_earning = sal_doc.get(\"earnings\")\nsal_deduction = sal_doc.get(\"deductions\")\n\n\nstu_doc = frappe.get_doc(\"Salary Structure\",sal_st_nm)\nst_earning = stu_doc.get(\"earnings\")\nst_deduction = stu_doc.get(\"deductions\")\n\n\n# Set type in Earning Table\nfor st_ear in st_earning:\n    st_com = st_ear.salary_component\n    st_type = st_ear.custom_type\n    st_ear_type = st_ear.custom_earning_component_type\n    \n    for sal_ear in sal_earning:\n        ans_nm = sal_ear.name\n        ans_com = sal_ear.salary_component\n        \n        if st_com==ans_com:\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_type', st_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_earning_component_type', st_ear_type)\n\n\n# Set type in Deduction Table\nfor st_ded in st_deduction:\n    st_com = st_ded.salary_component\n    st_type = st_ded.custom_type\n    st_ded_type = st_ded.custom_deduction_component_type\n    \n    for sal_ded in sal_deduction:\n        ans_nm = sal_ded.name\n        ans_com = sal_ded.salary_component\n        \n        if st_com==ans_com:\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_type', st_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_deduction_component_type', st_ded_type)\n\n\n#2. Set LWF in Salary Slip\nlabour_welfare_funds = frappe.get_list('Labour Welfare Fund', filters=[['posting_date', 'between', [start_date, end_date]]], fields=['name'])\nfor labour in labour_welfare_funds:\n    labour_nm = labour.name\n    \n    labour_emp = frappe.get_doc(\"Labour Welfare Fund\", labour_nm)\n    child_form = labour_emp.get(\"lwf_deduction\")\n    for child in child_form:\n        child_emp = child.employee\n        child_lwf = child.component\n        child_emp_contri = child.employee_contribution\n        \n        if ans_com != child_lwf:\n            # Get the Salary Slip document\n            salary_doc = frappe.get_doc(\"Salary Slip\", sal_nm)\n\n            # Append to the deductions child table directly\n            salary_doc.append(\"deductions\", {\n                'salary_component': child_lwf\n                \n            })\n\n            # Save the Salary Slip document\n            salary_doc.save()\n        else:\n            frappe.msgprint(str(ans_com))\n                    \n   \n \n \n \n    ",
  "script_type": "DocType Event"
 }
]