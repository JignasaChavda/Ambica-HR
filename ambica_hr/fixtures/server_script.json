[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-08 15:32:41.973105",
  "module": "Ambica HR",
  "name": "Set LWF and Paid Holiday Payment in Salary Slip",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Payroll Entry",
  "script": "salary_slip = frappe.get_all('Salary Slip', filters={'payroll_entry': doc.name}, fields=['name', 'salary_structure','start_date','end_date','employee'])\n\nfor slip in salary_slip:\n    sal_slip_nm = slip.name\n    sal_structure = slip.salary_structure\n    start_date = slip.start_date\n    end_date = slip.end_date\n    emp = slip.employee\n    sal_doc = frappe.get_doc(\"Salary Slip\",sal_slip_nm)\n\n    \n    # #2. Set LWF in Salary Slip\n    exis_lwf = frappe.db.get_value('Salary Detail', filters={'parent': sal_slip_nm, \"custom_deduction_component_type\": \"LWF\"}, fieldname=\"salary_component\")\n    \n    if exis_lwf is None:\n        \n        labour_welfare_funds = frappe.get_list('Labour Welfare Fund', filters=[['posting_date', 'between', [start_date, end_date]],['docstatus', '=', 1]], fields=['name','component','employee_contribution'])\n        for labour in labour_welfare_funds:\n            labour_nm = labour.name\n            labour_com = labour.component\n            emp_contri = labour.employee_contribution\n            \n            emps = frappe.db.get_value('LWF', filters={'parent': labour_nm, \"employee\": emp}, fieldname=\"employee\")\n            if emps is not None:\n              if labour_com is not None:\n                    row = sal_doc.append('deductions', {})\n                    row.salary_component = labour_com\n                    row.amount = emp_contri\n                    row.save()\n    \n\n    # Set Paid Holiday Payment\n    employee_doc = frappe.get_doc(\"Employee\", emp)\n    holiday_list = employee_doc.holiday_list\n    daily_rate = employee_doc.custom_daily_rate\n    \n    days = []\n    holiday_ans = {}\n    \n    \n    before_date = ''\n    after_date = ''\n    \n    if holiday_list:\n        # frappe.msgprint(str(holiday_list))\n        \n        holiday_child = frappe.get_all('Holiday', filters={'parent': holiday_list, 'weekly_off': 0, 'holiday_date': ('between', [start_date, end_date])}, fields=['holiday_date', 'description'])\n        all_holidays = frappe.get_all('Holiday', filters={'parent': holiday_list, 'holiday_date': ('between', [start_date, end_date])}, fields=['holiday_date', 'description'])\n    \n        for holi_day in all_holidays:\n            day = holi_day.holiday_date\n            days.append(day)\n       \n    \n        for holiday in holiday_child:\n            holiday_date = holiday.holiday_date\n            holiday_description = holiday.description\n        \n            holiday_ans[holiday_date] = {\n                'description': holiday_description\n                \n            }\n        sorted_holiday_ans = dict(sorted(holiday_ans.items()))\n    \n       \n    \n        for holiday_date in holiday_ans:\n            \n            for before_offset in [1, 2, 3, 4, 5]:\n                before_date = frappe.utils.add_days(holiday_date, -before_offset)\n    \n                if before_date not in days:\n                    formatted_before_date = frappe.utils.format_date(before_date,\"dd-MM-yyyy\")\n                    break\n            \n           \n            before_attendance = frappe.db.get_value('Attendance', filters={'employee': emp, 'attendance_date': before_date, 'docstatus': 1, 'custom_derived_present_minutes': ('>=', 1)}, fieldname=['name'])\n            \n            holiday_ans[holiday_date]['before_date'] = formatted_before_date\n            holiday_ans[holiday_date]['before_attendance'] = before_attendance\n            \n            \n            \n            for after_offset in [1, 2, 3, 4, 5]:\n                after_date = frappe.utils.add_days(holiday_date, after_offset)\n    \n                if after_date not in days:\n                    formatted_after_date = frappe.utils.format_date(after_date,\"dd-MM-yyyy\")\n                    break\n            \n            after_attendance = frappe.db.get_value('Attendance', filters={'employee': emp, 'attendance_date': after_date, 'docstatus': 1, 'custom_derived_present_minutes': ('>=', 1)}, fieldname=['name'])\n    \n            holiday_ans[holiday_date]['after_date'] = formatted_after_date\n            holiday_ans[holiday_date]['after_attendance'] = after_attendance\n            \n        \n        sorted_holiday_ans = dict(sorted(holiday_ans.items()))\n        paid_holidays_count = 0    \n        for date, details in sorted_holiday_ans.items():\n            if 'before_attendance' in details and 'after_attendance' in details:\n                before_attendance_value = details['before_attendance']\n                after_attendance_value = details['after_attendance']\n    \n                if before_attendance_value is not None and after_attendance_value is not None:\n                    \n                    paid_holiday_description = details['description']\n                    paid_holiday = date\n                    paid_holidays_count = paid_holidays_count + 1\n    \n                    row = sal_doc.append('custom_paid_holiday', {})\n                    row.date = paid_holiday\n                    row.description = paid_holiday_description\n                    row.save()\n                \t\n                    # frappe.msgprint(f\"Paid Holiday Date: {paid_holiday} Description: {paid_holiday_description}\")\n    \n        # frappe.msgprint(f\"Unsorteds: {paid_holidays_count}\")    \n     \n        paid_component = frappe.db.get_value('Salary Component', filters={'earning_component_type': 'Paid Holiday Payment', 'status': 'Approved'}, fieldname=\"name\")\n        gross_pay = sal_doc.get('gross_pay')\n      \n        if paid_holidays_count!=0 and paid_component and daily_rate:\n            paid_amount = paid_holidays_count*daily_rate\n            new_grosspay = gross_pay+paid_amount\n            row = sal_doc.append('earnings', {})\n            row.salary_component = paid_component\n            row.amount = paid_amount\n            row.save()\n            frappe.db.set_value('Salary Slip', sal_slip_nm, 'gross_pay', new_grosspay)\n            \n            \n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-08 15:34:01.299583",
  "module": "Ambica HR",
  "name": "Set Component Type in Salary Slip",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Salary Slip",
  "script": "# 1. Set Types in Salary Slip\nsal_nm = doc.name\nsal_st_nm = doc.salary_structure\nstart_date = doc.start_date\nend_date = doc.end_date\nemp = doc.employee\n\nsal_doc = frappe.get_doc(\"Salary Slip\",sal_nm)\nsal_earning = sal_doc.get(\"earnings\")\nsal_deduction = sal_doc.get(\"deductions\")\n\n\nstu_doc = frappe.get_doc(\"Salary Structure\",sal_st_nm)\nst_earning = stu_doc.get(\"earnings\")\nst_deduction = stu_doc.get(\"deductions\")\n\n\n# Set type in Earning Table\nfor st_ear in st_earning:\n    st_com = st_ear.salary_component\n    st_type = st_ear.custom_type\n    st_ear_type = st_ear.custom_earning_component_type\n    st_incentive_type = st_ear.custom_incentive_type\n    st_diff_type = st_ear.custom_difference_type\n    \n    for sal_ear in sal_earning:\n        ans_nm = sal_ear.name\n        ans_com = sal_ear.salary_component\n        \n        if st_com==ans_com:\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_type', st_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_earning_component_type', st_ear_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_incentive_type', st_incentive_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_difference_type', st_diff_type)\n\n\n# Set type in Deduction Table\nfor st_ded in st_deduction:\n    st_com = st_ded.salary_component\n    st_type = st_ded.custom_type\n    st_ded_type = st_ded.custom_deduction_component_type\n    st_pf_ded = st_ded.custom_pf_account_contribution\n    st_can_ded = st_ded.custom_canteen_type\n    st_section_code = st_ded.custom_section_code\n    \n    for sal_ded in sal_deduction:\n        ans_nm = sal_ded.name\n        ans_com = sal_ded.salary_component\n        \n        if st_com==ans_com:\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_type', st_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_deduction_component_type', st_ded_type)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_pf_account_contribution', st_pf_ded)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_canteen_type', st_can_ded)\n            frappe.db.set_value('Salary Detail', ans_nm, 'custom_canteen_type', st_section_code)\n\n\n\n",
  "script_type": "DocType Event"
 }
]